// Code generated by go-bindata.
// sources:
// pkg/db/migrations/001_initial.down.sql
// pkg/db/migrations/001_initial.up.sql
// pkg/db/migrations/002_add_cluster_resource_comment.down.sql
// pkg/db/migrations/002_add_cluster_resource_comment.up.sql
// pkg/db/migrations/003_add_project_parent_id.down.sql
// pkg/db/migrations/003_add_project_parent_id.up.sql
// pkg/db/migrations/004_fix_domain_uuid_uniqueness.down.sql
// pkg/db/migrations/004_fix_domain_uuid_uniqueness.up.sql
// pkg/db/migrations/005_add_project_resource_subresources.down.sql
// pkg/db/migrations/005_add_project_resource_subresources.up.sql
// pkg/db/migrations/006_add_cluster_resources_subcapacities.down.sql
// pkg/db/migrations/006_add_cluster_resources_subcapacities.up.sql
// DO NOT EDIT!

package dbdata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initialDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xce\x29\x2d\x2e\x49\x2d\x8a\x2f\x4e\x2d\x2a\xcb\x4c\x4e\x2d\xb6\xe6\xc2\x22\x59\x94\x5a\x9c\x5f\x5a\x84\x2e\x9b\x92\x9f\x9b\x98\x99\x87\x4d\x0c\xbb\x69\x50\x39\xec\x86\x15\x14\xe5\x67\xa5\x26\x97\xc0\x04\x3d\xfd\x5c\x5c\x23\x60\x82\x70\xe3\xe2\x8b\x4b\x12\x73\x52\xe3\x33\x53\x2a\xb0\xe9\xc5\x6e\x2b\x4c\x12\xc9\x5a\x40\x00\x00\x00\xff\xff\xb3\x24\x67\x9c\xff\x00\x00\x00")

func _001_initialDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initialDownSql,
		"001_initial.down.sql",
	)
}

func _001_initialDownSql() (*asset, error) {
	bytes, err := _001_initialDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_initial.down.sql", size: 255, mode: os.FileMode(420), modTime: time.Unix(1512381827, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initialUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\xcd\x72\x9b\x30\x10\xbe\xf3\x14\x7b\x74\x66\xdc\x27\xe8\x49\xb6\xd7\x19\xa6\x18\xa7\x20\xcf\x24\x27\x46\x45\x6a\xa2\x96\x00\x05\x91\xa9\xdf\xbe\x83\x25\x81\xca\x4f\x49\xec\x29\xd7\x5d\xf6\xdb\xef\x67\xf5\xa9\xfb\x20\xcd\x9a\x5a\x89\x0a\x32\xf1\x26\x32\xcf\xdb\x46\x48\x28\x02\x25\x9b\x00\x6d\x2d\xa9\x45\xf5\x26\x53\x51\xc3\xca\x03\x90\x1c\xec\xb7\xf1\xef\x63\x8c\x7c\x12\x40\x78\xa4\x10\x9e\x82\x00\x1e\x22\xff\x40\xa2\x27\xf8\x82\x4f\x6b\x0f\xba\x09\x92\x03\xc5\x47\xaa\x7f\xb3\xcd\x6d\x83\x3a\x97\xc2\x4c\x9b\x6e\xa8\xd3\x8a\x95\x82\x27\x4c\x01\xf5\x0f\x18\x53\x72\x78\xf8\xab\xe1\x14\xfa\x5f\x4f\x08\xab\x1e\x6a\x7d\x99\x7a\xe7\xdd\x7d\x9e\xe1\x53\x89\xba\x68\x2a\x4b\xc8\xb0\x6b\x77\xdc\xf8\xf7\x7e\x48\x7b\x36\x11\xee\x31\xc2\x70\x8b\xf1\x58\x8b\x63\x08\x3b\x0c\x90\x22\x6c\x49\xbc\x25\x3b\x6c\x97\xc9\xd9\xeb\x80\x8e\xbb\x6a\xca\x4a\x96\x4a\x75\xd6\xd2\xb9\x48\x6d\xd5\x91\x0e\x56\xfd\x52\xeb\xcb\x50\xcd\xc6\xf1\x8d\x17\xaf\x4c\xe6\x93\xb6\xe9\xd2\xff\x70\x6b\x4c\x6f\xd0\xd0\x34\x1d\xe0\xb8\xc1\x58\x35\xf6\x45\x2f\x7c\x43\xcc\xcc\x80\xf6\x1f\x23\xac\x0b\xeb\xb8\x68\xa5\x99\x34\x6f\x31\x8b\x36\x6a\x1d\xdc\x6c\xd2\x4c\xc7\x35\x41\x1b\x8a\x71\x45\xce\x7e\x35\x85\x62\x9d\x76\xb7\xe5\xac\xac\x8a\x1f\x22\x55\x93\x41\x33\xb5\xa1\x61\x1f\xf1\xeb\x06\xbb\x7a\x0d\x96\xb2\xf8\x81\x28\x1a\x4a\xb3\x59\x7c\x07\x39\x3b\x62\x39\x8d\x9d\x7e\x4b\x71\x5c\x7e\x1b\xfb\xc7\x71\x0d\xed\xeb\x20\xbe\xb3\x26\x53\x35\xa8\x42\xa3\xaa\x02\x64\xce\x65\xca\x94\x00\xf5\xc2\x94\xfe\x57\xe6\xcf\xc0\x25\x87\xbc\x50\xf0\xc2\xca\x52\xe4\x70\x16\xaa\x9d\xac\x58\x66\xc1\x37\xc7\x63\x80\x24\x74\x39\xec\x70\x4f\x4e\x01\x85\x3d\x09\x62\x74\x2f\xa3\xe7\xee\x9c\x86\x11\xd8\x0f\x77\xf8\x38\x12\x38\xb9\x40\x25\x92\xff\x6e\x55\x18\xcb\x7f\x29\xcf\xda\x34\x7b\x60\xe3\xe8\x4f\x08\xff\xfe\x23\x5b\xbc\xb3\xe9\x53\x6b\x6a\xf6\x2c\xfe\xd5\xf0\x8d\xa5\x3f\x45\xce\x13\x3d\xe9\xaa\x63\xfd\x13\x00\x00\xff\xff\xeb\x47\x3e\x34\xcc\x07\x00\x00")

func _001_initialUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initialUpSql,
		"001_initial.up.sql",
	)
}

func _001_initialUpSql() (*asset, error) {
	bytes, err := _001_initialUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_initial.up.sql", size: 1996, mode: os.FileMode(420), modTime: time.Unix(1512381827, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __002_add_cluster_resource_commentDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\xce\x29\x2d\x2e\x49\x2d\x8a\x2f\x4a\x2d\xce\x2f\x2d\x4a\x4e\x2d\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xce\xcf\xcd\x4d\xcd\x2b\xb1\xe6\x02\x04\x00\x00\xff\xff\xe7\x11\x3f\x08\x33\x00\x00\x00")

func _002_add_cluster_resource_commentDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__002_add_cluster_resource_commentDownSql,
		"002_add_cluster_resource_comment.down.sql",
	)
}

func _002_add_cluster_resource_commentDownSql() (*asset, error) {
	bytes, err := _002_add_cluster_resource_commentDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "002_add_cluster_resource_comment.down.sql", size: 51, mode: os.FileMode(420), modTime: time.Unix(1512381827, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __002_add_cluster_resource_commentUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x3b\x0e\x80\x20\x0c\x06\xe0\xdd\x53\xfc\x1b\x87\x70\xaa\x52\xa7\x0a\x89\x29\x89\x9b\x03\xe9\x26\x92\xf0\xb8\xbf\x1f\x89\xf2\x05\xa5\x4d\x18\xf9\x9d\x7d\x58\x7b\x9a\xf5\x3a\x5b\xb6\x0e\xf2\x1e\x7b\x94\x74\x06\xe4\x5a\x8a\x7d\x03\xca\xb7\x22\x44\x45\x48\x22\xf0\x7c\x50\x12\x85\x73\xeb\xf2\x07\x00\x00\xff\xff\xd0\xf3\xfb\x94\x4b\x00\x00\x00")

func _002_add_cluster_resource_commentUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__002_add_cluster_resource_commentUpSql,
		"002_add_cluster_resource_comment.up.sql",
	)
}

func _002_add_cluster_resource_commentUpSql() (*asset, error) {
	bytes, err := _002_add_cluster_resource_commentUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "002_add_cluster_resource_comment.up.sql", size: 75, mode: os.FileMode(420), modTime: time.Unix(1512381827, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __003_add_project_parent_idDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x28\xca\xcf\x4a\x4d\x2e\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x48\x2c\x4a\xcd\x2b\x89\x2f\x2d\xcd\x4c\xb1\xe6\x02\x04\x00\x00\xff\xff\x07\x87\x85\x0d\x2e\x00\x00\x00")

func _003_add_project_parent_idDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__003_add_project_parent_idDownSql,
		"003_add_project_parent_id.down.sql",
	)
}

func _003_add_project_parent_idDownSql() (*asset, error) {
	bytes, err := _003_add_project_parent_idDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "003_add_project_parent_id.down.sql", size: 46, mode: os.FileMode(420), modTime: time.Unix(1512381827, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __003_add_project_parent_idUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x28\xca\xcf\x4a\x4d\x2e\x29\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x48\x2c\x4a\xcd\x2b\x89\x2f\x2d\xcd\x4c\x51\x08\x71\x8d\x08\x51\xf0\xf3\x0f\x51\xf0\x0b\xf5\xf1\x51\x70\x71\x75\x73\x0c\xf5\x09\x51\x50\x57\xb7\xe6\x02\x04\x00\x00\xff\xff\x1a\xbc\x80\x8b\x46\x00\x00\x00")

func _003_add_project_parent_idUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__003_add_project_parent_idUpSql,
		"003_add_project_parent_id.up.sql",
	)
}

func _003_add_project_parent_idUpSql() (*asset, error) {
	bytes, err := _003_add_project_parent_idUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "003_add_project_parent_id.up.sql", size: 70, mode: os.FileMode(420), modTime: time.Unix(1512381827, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __004_fix_domain_uuid_uniquenessDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\x70\x72\x75\xf7\xf4\x53\x28\xce\xce\x2c\x50\xc8\xcc\x53\x28\x2e\xcc\xc9\x2c\x49\xe5\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\xc9\xcf\x4d\xcc\xcc\x2b\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x0b\x0e\x09\x72\xf4\xf4\x0b\x81\x89\xc7\x97\x96\x66\xa6\xc4\x27\xe7\x94\x16\x97\xa4\x16\xc5\x67\xa6\xc4\x67\xa7\x56\x5a\x63\x35\xc0\xd1\xc5\x45\x21\xd4\xcf\x33\x30\xd4\x55\x41\x03\xa4\x49\xd3\x9a\x4b\x57\x57\xc1\xd5\xcf\x05\xdd\x76\x40\x00\x00\x00\xff\xff\x6f\x42\x89\xfd\x96\x00\x00\x00")

func _004_fix_domain_uuid_uniquenessDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__004_fix_domain_uuid_uniquenessDownSql,
		"004_fix_domain_uuid_uniqueness.down.sql",
	)
}

func _004_fix_domain_uuid_uniquenessDownSql() (*asset, error) {
	bytes, err := _004_fix_domain_uuid_uniquenessDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "004_fix_domain_uuid_uniqueness.down.sql", size: 150, mode: os.FileMode(420), modTime: time.Unix(1512381827, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __004_fix_domain_uuid_uniquenessUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\x70\x72\x75\xf7\xf4\x53\x28\xce\xce\x2c\x50\xc8\xcc\x53\x28\x2e\xcc\xc9\x2c\x49\xe5\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\xc9\xcf\x4d\xcc\xcc\x2b\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x0b\x0e\x09\x72\xf4\xf4\x0b\x81\x89\xc7\x97\x96\x66\xa6\xc4\x67\xa7\x56\x5a\x63\xd5\xe5\xe8\xe2\xa2\x10\xea\xe7\x19\x18\xea\xaa\xa0\x01\x52\xa9\xa3\x90\x9c\x53\x5a\x5c\x92\x5a\x14\x9f\x99\xa2\x69\xcd\xa5\xab\xab\xe0\xea\xe7\x82\x6e\x3d\x20\x00\x00\xff\xff\xbd\xe5\x4a\x21\x97\x00\x00\x00")

func _004_fix_domain_uuid_uniquenessUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__004_fix_domain_uuid_uniquenessUpSql,
		"004_fix_domain_uuid_uniqueness.up.sql",
	)
}

func _004_fix_domain_uuid_uniquenessUpSql() (*asset, error) {
	bytes, err := _004_fix_domain_uuid_uniquenessUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "004_fix_domain_uuid_uniqueness.up.sql", size: 151, mode: os.FileMode(420), modTime: time.Unix(1512381827, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __005_add_project_resource_subresourcesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x28\xca\xcf\x4a\x4d\x2e\x89\x2f\x4a\x2d\xce\x2f\x2d\x4a\x4e\x2d\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x2e\x4d\x82\x4b\x58\x73\x01\x02\x00\x00\xff\xff\x33\x8f\x2d\x84\x38\x00\x00\x00")

func _005_add_project_resource_subresourcesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__005_add_project_resource_subresourcesDownSql,
		"005_add_project_resource_subresources.down.sql",
	)
}

func _005_add_project_resource_subresourcesDownSql() (*asset, error) {
	bytes, err := _005_add_project_resource_subresourcesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "005_add_project_resource_subresources.down.sql", size: 56, mode: os.FileMode(420), modTime: time.Unix(1512381827, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __005_add_project_resource_subresourcesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x28\xca\xcf\x4a\x4d\x2e\x89\x2f\x4a\x2d\xce\x2f\x2d\x4a\x4e\x2d\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x2e\x4d\x42\x88\x87\xb8\x46\x84\x28\xf8\xf9\x87\x28\xf8\x85\xfa\xf8\x28\xb8\xb8\xba\x39\x86\xfa\x84\x28\xa8\xab\x5b\x73\x01\x02\x00\x00\xff\xff\x40\xf2\x0c\x54\x50\x00\x00\x00")

func _005_add_project_resource_subresourcesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__005_add_project_resource_subresourcesUpSql,
		"005_add_project_resource_subresources.up.sql",
	)
}

func _005_add_project_resource_subresourcesUpSql() (*asset, error) {
	bytes, err := _005_add_project_resource_subresourcesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "005_add_project_resource_subresources.up.sql", size: 80, mode: os.FileMode(420), modTime: time.Unix(1512381827, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __006_add_cluster_resources_subcapacitiesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\xce\x29\x2d\x2e\x49\x2d\x8a\x2f\x4a\x2d\xce\x2f\x2d\x4a\x4e\x2d\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x2e\x4d\x4a\x4e\x2c\x48\x4c\xce\x2c\xc9\x4c\x2d\xb6\xe6\x02\x04\x00\x00\xff\xff\x6e\x04\x33\xae\x39\x00\x00\x00")

func _006_add_cluster_resources_subcapacitiesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__006_add_cluster_resources_subcapacitiesDownSql,
		"006_add_cluster_resources_subcapacities.down.sql",
	)
}

func _006_add_cluster_resources_subcapacitiesDownSql() (*asset, error) {
	bytes, err := _006_add_cluster_resources_subcapacitiesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "006_add_cluster_resources_subcapacities.down.sql", size: 57, mode: os.FileMode(420), modTime: time.Unix(1529486720, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __006_add_cluster_resources_subcapacitiesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x31\x0a\x42\x31\x0c\x06\xe0\xdd\x53\xfc\x5b\x0f\xe1\x14\x6d\x9c\x62\x0b\x92\x82\x9b\xd4\x90\xa1\x20\xf8\x68\xda\xfb\xbf\x8f\x44\xf9\x05\xa5\x9b\x30\xec\xb7\x63\xf9\xfc\x4c\x8f\xff\x9e\xe6\x01\xca\x19\xf7\x2a\xed\x59\x10\xfb\x6b\xfd\xe8\x36\xd6\xf0\x80\xf2\x5b\x51\xaa\xa2\x34\x11\x64\x7e\x50\x13\x45\x4a\xd7\xcb\x19\x00\x00\xff\xff\xb5\x6b\xc1\xbd\x51\x00\x00\x00")

func _006_add_cluster_resources_subcapacitiesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__006_add_cluster_resources_subcapacitiesUpSql,
		"006_add_cluster_resources_subcapacities.up.sql",
	)
}

func _006_add_cluster_resources_subcapacitiesUpSql() (*asset, error) {
	bytes, err := _006_add_cluster_resources_subcapacitiesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "006_add_cluster_resources_subcapacities.up.sql", size: 81, mode: os.FileMode(420), modTime: time.Unix(1529486742, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_initial.down.sql":                             _001_initialDownSql,
	"001_initial.up.sql":                               _001_initialUpSql,
	"002_add_cluster_resource_comment.down.sql":        _002_add_cluster_resource_commentDownSql,
	"002_add_cluster_resource_comment.up.sql":          _002_add_cluster_resource_commentUpSql,
	"003_add_project_parent_id.down.sql":               _003_add_project_parent_idDownSql,
	"003_add_project_parent_id.up.sql":                 _003_add_project_parent_idUpSql,
	"004_fix_domain_uuid_uniqueness.down.sql":          _004_fix_domain_uuid_uniquenessDownSql,
	"004_fix_domain_uuid_uniqueness.up.sql":            _004_fix_domain_uuid_uniquenessUpSql,
	"005_add_project_resource_subresources.down.sql":   _005_add_project_resource_subresourcesDownSql,
	"005_add_project_resource_subresources.up.sql":     _005_add_project_resource_subresourcesUpSql,
	"006_add_cluster_resources_subcapacities.down.sql": _006_add_cluster_resources_subcapacitiesDownSql,
	"006_add_cluster_resources_subcapacities.up.sql":   _006_add_cluster_resources_subcapacitiesUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_initial.down.sql":                             {_001_initialDownSql, map[string]*bintree{}},
	"001_initial.up.sql":                               {_001_initialUpSql, map[string]*bintree{}},
	"002_add_cluster_resource_comment.down.sql":        {_002_add_cluster_resource_commentDownSql, map[string]*bintree{}},
	"002_add_cluster_resource_comment.up.sql":          {_002_add_cluster_resource_commentUpSql, map[string]*bintree{}},
	"003_add_project_parent_id.down.sql":               {_003_add_project_parent_idDownSql, map[string]*bintree{}},
	"003_add_project_parent_id.up.sql":                 {_003_add_project_parent_idUpSql, map[string]*bintree{}},
	"004_fix_domain_uuid_uniqueness.down.sql":          {_004_fix_domain_uuid_uniquenessDownSql, map[string]*bintree{}},
	"004_fix_domain_uuid_uniqueness.up.sql":            {_004_fix_domain_uuid_uniquenessUpSql, map[string]*bintree{}},
	"005_add_project_resource_subresources.down.sql":   {_005_add_project_resource_subresourcesDownSql, map[string]*bintree{}},
	"005_add_project_resource_subresources.up.sql":     {_005_add_project_resource_subresourcesUpSql, map[string]*bintree{}},
	"006_add_cluster_resources_subcapacities.down.sql": {_006_add_cluster_resources_subcapacitiesDownSql, map[string]*bintree{}},
	"006_add_cluster_resources_subcapacities.up.sql":   {_006_add_cluster_resources_subcapacitiesUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
